// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Guild {
  id                String             @id
  name              String
  users             UserGuild[]
  joinedAt          DateTime           @default(now())
  scheduledMessages ScheduledMessage[]
}

model User {
  id               String            @id
  name             String
  money            Int               @default(1000)
  guilds           UserGuild[]
  omikujiResults   OmikujiResult[]
  coinFlipGameLogs CoinFlipGameLog[]
  jankenGameLogs   JankenGame[]
  challengerGames  JankenGame[]      @relation("challenger")
  opponentGames    JankenGame[]      @relation("opponent")
  createdScheduledMessages ScheduledMessage[]
  lastDrawDate     DateTime          @default(now())
  createdAt        DateTime          @default(now())
}

model UserGuild {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  @@id([userId, guildId])
}

model ScheduledMessage {
  id           String   @id @default(cuid())
  guildId      String
  guild        Guild    @relation(fields: [guildId], references: [id])
  channelId    String
  message      String
  scheduleTime String
  createdUserId String
  createdUser   User     @relation(fields: [createdUserId], references: [id])
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OmikujiResult {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  result    String
  createdAt DateTime @default(now())
}

model CoinFlipGameLog {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  bet          Int
  win          Boolean
  updatedMoney Int
  createdAt    DateTime @default(now())
}

model JankenGame {
  id               String   @id @default(cuid())
  challengerId     String
  challenger       User     @relation("challenger", fields: [challengerId], references: [id])
  opponentId       String
  opponent         User     @relation("opponent", fields: [opponentId], references: [id])
  challengerChoice String
  opponentChoice   String
  challengerBet    Int
  opponentBet      Int
  winnerId         String?
  createdAt        DateTime @default(now())
  User             User?    @relation(fields: [userId], references: [id])
  userId           String?
}

model Goods {
  id          String   @id @default(cuid())
  type        String
  name        String
  price       Int
  description String
  createdAt   DateTime @default(now())
}
